-- Creates new local class named XAPI
local XAPI = Class("XAPI")

function XAPI:initialize()

	-- Creates new menu
	self.menu = Menu("XAPI Information")

	self.menu:label("XAPI Info Version 1.0") self.menu:separator() self.menu:space()

	self.menu:subMenu("Local Player Info", "PLAYER_INFO")
		self.menu["PLAYER_INFO"]:label("Valid:", "VALID")
		self.menu["PLAYER_INFO"]:label("Name:", "NAME")
		self.menu["PLAYER_INFO"]:label("Id:", "ID")
		self.menu["PLAYER_INFO"]:label("Data Id:", "DATAID")
		self.menu["PLAYER_INFO"]:label("NPC Id:", "NPCID")
		self.menu["PLAYER_INFO"]:label("Index:", "INDEX")
		self.menu["PLAYER_INFO"]:label("Targetable:", "TARGETABLE")
		self.menu["PLAYER_INFO"]:label("Kind:", "KIND")
		self.menu["PLAYER_INFO"]:label("SubKind:", "SUBKIND")
		self.menu["PLAYER_INFO"]:label("Pos:", "POS")
		self.menu["PLAYER_INFO"]:label("YalmX:", "YALMX")
		self.menu["PLAYER_INFO"]:label("YalmZ:", "YALMZ")
		self.menu["PLAYER_INFO"]:label("Target Status:", "TSTATUS")
		self.menu["PLAYER_INFO"]:label("Rotation:", "ROTATION")
		self.menu["PLAYER_INFO"]:label("Radius:", "RADIUS")
		self.menu["PLAYER_INFO"]:label("FateId:", "FATEID")
		self.menu["PLAYER_INFO"]:label("Health:", "HEALTH")
		self.menu["PLAYER_INFO"]:label("Max Health:", "MAX_HEALTH")
		self.menu["PLAYER_INFO"]:label("Missing Health:", "MISSING_HEALTH")
		self.menu["PLAYER_INFO"]:label("Health Percentage:", "HEALTH_PERCENT")
		self.menu["PLAYER_INFO"]:label("Mana:", "MANA")
		self.menu["PLAYER_INFO"]:label("Max Mana:", "MAX_MANA")
		self.menu["PLAYER_INFO"]:label("Missing Mana:", "MISSING_MANA")
		self.menu["PLAYER_INFO"]:label("Gathering Points:", "GP")
		self.menu["PLAYER_INFO"]:label("Max Gathering Points:", "MAX_GP")
		self.menu["PLAYER_INFO"]:label("Crafting Points:", "CP")
		self.menu["PLAYER_INFO"]:label("Max Crafting Points:", "MAX_CP")
		self.menu["PLAYER_INFO"]:label("Class Job:", "CLASS_JOB")
		self.menu["PLAYER_INFO"]:label("Class Level:", "CLASS_LEVEL")
		self.menu["PLAYER_INFO"]:label("Target Id:", "TARGET_ID")
		self.menu["PLAYER_INFO"]:label("Is Moving?: ", "IS_MOVING")
		self.menu["PLAYER_INFO"]:label("Is Dead?: ", "IS_DEAD")
		self.menu["PLAYER_INFO"]:label("Is Mounted?: ", "IS_MOUNTED")
		self.menu["PLAYER_INFO"]:label("Is Casting?:", "IS_CASTING")
		self.menu["PLAYER_INFO"]:label("Can be Interrupted?:", "IS_INTERRUPT")
		self.menu["PLAYER_INFO"]:label("Is Flying?: ", "IS_FLYING")
		self.menu["PLAYER_INFO"]:label("Is Fishing?:", "IS_FISHING")
		self.menu["PLAYER_INFO"]:label("Bait Id:", "BAIT_ID")
		self.menu["PLAYER_INFO"]:label("Fishing Status:", "FISHING_STATUS")
		self.menu["PLAYER_INFO"]:label("Is Auto Running?: ", "IS_RUNNING")
		self.menu["PLAYER_INFO"]:label("Is Auto Descending?: ", "IS_DESCEND")
		self.menu["PLAYER_INFO"]:label("Has Companion Out?: ", "HAS_COMPANION")
		self.menu["PLAYER_INFO"]:label("Has Summon Minion Out?: ", "HAS_SUMMON")
	self.menu:subMenu("Local Player Functions", "PLAYER_FUNCS")
		self.menu["PLAYER_FUNCS"]:label("Teleport") self.menu["PLAYER_FUNCS"]:separator() self.menu["PLAYER_FUNCS"]:space()
		self.menu["PLAYER_FUNCS"]:number("Aetheryte Id", "AETHER_ID", 0)
		self.menu["PLAYER_FUNCS"]:button("Teleport To Aetheryte", "TELEPORT", function()
			player:teleportTo(self.menu["PLAYER_FUNCS"]["AETHER_ID"].int)
		end)
		self.menu["PLAYER_FUNCS"]:label("Bait") self.menu["PLAYER_FUNCS"]:separator() self.menu["PLAYER_FUNCS"]:space()
		self.menu["PLAYER_FUNCS"]:number("Bait Id", "BAIT_ID", 0)
		self.menu["PLAYER_FUNCS"]:button("Set Bait", "SET_BAIT", function()
			print("Setting Bait", self.menu["PLAYER_FUNCS"]["BAIT_ID"].int)
			player:setBait(self.menu["PLAYER_FUNCS"]["BAIT_ID"].int)
		end)
	self.menu:subMenu("Target Info", "TARGET_INFO")
		self.menu["TARGET_INFO"]:label("Valid:", "VALID")
		self.menu["TARGET_INFO"]:label("Name:", "NAME")
		self.menu["TARGET_INFO"]:label("Id:", "ID")
		self.menu["TARGET_INFO"]:label("Data Id:", "DATAID")
		self.menu["TARGET_INFO"]:label("NPC Id:", "NPCID")
		self.menu["TARGET_INFO"]:label("Index:", "INDEX")
		self.menu["TARGET_INFO"]:label("Targetable:", "TARGETABLE")
		self.menu["TARGET_INFO"]:label("Kind:", "KIND")
		self.menu["TARGET_INFO"]:label("SubKind:", "SUBKIND")
		self.menu["TARGET_INFO"]:label("Pos:", "POS")
		self.menu["TARGET_INFO"]:label("YalmX:", "YALMX")
		self.menu["TARGET_INFO"]:label("YalmZ:", "YALMZ")
		self.menu["TARGET_INFO"]:label("Target Status:", "TSTATUS")
		self.menu["TARGET_INFO"]:label("Rotation:", "ROTATION")
		self.menu["TARGET_INFO"]:label("Radius:", "RADIUS")
		self.menu["TARGET_INFO"]:label("FateId:", "FATEID")
		self.menu["TARGET_INFO"]:label("Health:", "HEALTH")
		self.menu["TARGET_INFO"]:label("Max Health:", "MAX_HEALTH")
		self.menu["TARGET_INFO"]:label("Missing Health:", "MISSING_HEALTH")
		self.menu["TARGET_INFO"]:label("Health Percentage:", "HEALTH_PERCENT")
		self.menu["TARGET_INFO"]:label("Mana:", "MANA")
		self.menu["TARGET_INFO"]:label("Max Mana:", "MAX_MANA")
		self.menu["TARGET_INFO"]:label("Missing Mana:", "MISSING_MANA")
		self.menu["TARGET_INFO"]:label("Gathering Points:", "GP")
		self.menu["TARGET_INFO"]:label("Max Gathering Points:", "MAX_GP")
		self.menu["TARGET_INFO"]:label("Crafting Points:", "CP")
		self.menu["TARGET_INFO"]:label("Max Crafting Points:", "MAX_CP")
		self.menu["TARGET_INFO"]:label("Class Job:", "CLASS_JOB")
		self.menu["TARGET_INFO"]:label("Class Level:", "CLASS_LEVEL")
		self.menu["TARGET_INFO"]:label("Target Id:", "TARGET_ID")
	
	-- Adds our update function into the game's tick
	Callbacks:Add(CALLBACK_PLAYER_TICK, function () self:Update() end)
	Callbacks:Add(CALLBACK_PLAYER_DRAW, function () self:Draw() end)
end

function XAPI:Update()
	self:UpdateMenu(self.menu["PLAYER_INFO"], player)
	self:UpdateMenu(self.menu["TARGET_INFO"], TargetManager.Target)
end

function XAPI:Draw()
	
	local target = TargetManager.Target

	if not target.valid or target.kind ~= 2 or target.subKind ~= 5 then return end
	Graphics.DrawText3D(Vector3(target.pos.x + 1, target.pos.y + 2, target.pos.z), "Cast Information:", 15)
	Graphics.DrawText3D(Vector3(target.pos.x + 1, target.pos.y + 1.60, target.pos.z), "IsCasting: " .. tostring(target.castInfo.isCasting), 15)
	Graphics.DrawText3D(Vector3(target.pos.x + 1, target.pos.y + 1.20, target.pos.z), "IsInterruptible: " .. tostring(target.castInfo.isInterruptible), 15)
	Graphics.DrawText3D(Vector3(target.pos.x + 1, target.pos.y + 0.80, target.pos.z), "ActionId: " .. tostring(target.castInfo.actionId), 15)
	Graphics.DrawText3D(Vector3(target.pos.x + 1, target.pos.y + 0.40, target.pos.z), "CastTargetId: " .. tostring(target.castInfo.castTargetId), 15)
	Graphics.DrawText3D(Vector3(target.pos.x + 1, target.pos.y, target.pos.z), "CurrentCastTime: " .. tostring(target.castInfo.currentCastTime), 15)
	
	if (target.castInfo.castLocation ~= Vector3(0, 0, 0)) then
		Graphics.DrawCircle3D(target.castInfo.castLocation, 20, 1, Colors.Red)
	end
end

function XAPI:UpdateMenu(menu, obj)
	
	menu["VALID"].str = "Valid: " .. tostring(obj.valid)

	if not obj.valid then return end

	menu["NAME"].str = "Name: " .. obj.name
	menu["ID"].str = "Id: " .. tostring(obj.id)
	menu["DATAID"].str = "Data Id: " .. tostring(obj.dataId)
	menu["NPCID"].str = "NPC Id: " .. tostring(obj.npcId)
	menu["INDEX"].str = "Index: " .. tostring(obj.index)
	menu["TARGETABLE"].str = "Targetable: " .. tostring(obj.isTargetable)
	menu["KIND"].str = "Kind: " .. tostring(obj.kind)
	menu["SUBKIND"].str = "SubKind: " .. tostring(obj.subKind)
	menu["POS"].str = "Pos: " .. tostring(obj.pos):gsub("Vector3", "")
	menu["YALMX"].str = "YalmX: " .. tostring(obj.yalmX)
	menu["YALMZ"].str = "YalmZ: " .. tostring(obj.yalmZ)
	menu["TSTATUS"].str = "Target Status: " .. tostring(obj.targetStatus)
	menu["ROTATION"].str = "Rotation: " .. tostring(obj.rotation)
	menu["RADIUS"].str = "Radius: " .. tostring(obj.radius)
	menu["FATEID"].str = "Fate Id: " .. tostring(obj.fateId)
	if obj.kind ~= 1 and obj.kind ~= 2 then return end
	menu["HEALTH"].str = "Health: " .. tostring(obj.health)
	menu["MAX_HEALTH"].str = "Max Health: " .. tostring(obj.maxHealth)
	menu["MISSING_HEALTH"].str = "Missing Health: " .. tostring(obj.missingHealth)
	menu["HEALTH_PERCENT"].str = "Health Percentage: " .. tostring(obj.healthPercent)
	menu["MANA"].str = "Mana: " .. tostring(obj.mana)
	menu["MAX_MANA"].str = "Max Mana: " .. tostring(obj.maxMana)
	menu["MISSING_MANA"].str = "Missing Mana: " .. tostring(obj.missingMana)
	menu["GP"].str = "Gathering Points: " .. tostring(obj.GP)
	menu["MAX_GP"].str = "Max Gathering Points: " .. tostring(obj.maxGP)
	menu["CP"].str = "Crafting Points: " .. tostring(obj.CP)
	menu["MAX_CP"].str = "Max Crafting Points: " .. tostring(obj.maxCP)
	menu["CLASS_JOB"].str = "Class Job: " .. tostring(obj.classJob)
	menu["CLASS_LEVEL"].str = "Class Level: " .. tostring(obj.classLevel)
	menu["TARGET_ID"].str = "Target ID: " .. tostring(obj.targetId)
	if obj.id ~= player.id then return end
	menu["IS_MOVING"].str = "Is Moving? : " .. tostring(obj.isMoving)
	menu["IS_DEAD"].str = "Is Dead? : " .. tostring(obj.isDead)
	menu["IS_MOUNTED"].str = "IsMounted? : " .. tostring(obj.isMounted)
	menu["IS_CASTING"].str = "IsCasting? : " .. tostring(obj.isCasting)
	menu["IS_INTERRUPT"].str = "Can Be Interrupted? : " .. tostring(obj.isInterruptible)
	menu["IS_FLYING"].str = "Is Flying? : " .. tostring(obj.isFlying)
	menu["BAIT_ID"].str = "Bait Id: " .. tostring(obj.baitId)
	menu["FISHING_STATUS"].str = "Fishing Status: " .. tostring(obj.fishingStatus)
	menu["IS_FISHING"].str = "Is Fishing? : " .. tostring(obj.isFishing)
	menu["IS_RUNNING"].str = "Is Auto Running? : " .. tostring(obj.isAutoRunning)
	menu["IS_DESCEND"].str = "Is Auto Descending? : " .. tostring(obj.isAutoDescending)
	menu["HAS_COMPANION"].str = "Has Companion Out? : " .. tostring(obj.hasCompanion)
	menu["HAS_SUMMON"].str = "Has Summon Minion Out? : " .. tostring(obj.hasSummon)

end

return XAPI:new()
